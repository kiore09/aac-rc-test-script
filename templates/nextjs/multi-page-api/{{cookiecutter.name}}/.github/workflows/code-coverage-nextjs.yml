{% raw %}
# This is a workflow to run unit tests, report code coverage
name: Code Coverage - NodeJS NextJS
on:
  workflow_dispatch:
  pull_request:
    branches:
      - main
    types: [opened, reopened, edited]


jobs:
  # Execute JavaScript unit tests
  code-coverage:
    permissions: write-all
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x]
    steps:
      # Check out your GitHub repo into the container executing these steps
      - uses: actions/checkout@v4

      # Install Node in order to install all dependencies and run tests
      - name: Install Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      # Install application dependencies
      - name: Install Dependencies
        working-directory: src/app
        run: npm install
        
      # Run Cypress end-to-end tests
      # Install npm dependencies, cache them correctly
      # and run all Cypress e2e tests
      - name: Run Cypress E2E Tests and Report Results
        uses: cypress-io/github-action@v6
        id: tests
        with:
          start: npm run dev 
          wait-on: 'http://localhost:3000/'

      - name: Run Cypress Component Tests and Report Results
        uses: cypress-io/github-action@v6
        with:
          component: true
          start: npm run dev 
          wait-on: 'http://localhost:3001/' 
          
      # Generate coverage report
      - name: Generate Coverage Report
        id: coverage
        run: |
          npx nyc report --reporter=text-summary > coverage.txt

      # Add comment to PR with Coverage Report
      - name: Add comment with coverage report
        if: steps.tests.outcome == 'success' && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const coverage = fs.readFileSync('coverage.txt', 'utf8');
            const body = `Code Coverage Summary:\n\`\`\`\n${coverage}\n\`\`\``;
        
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
           
      # Commit coverage files generated during the prior tests to your branch
      - name: Archive Code Coverage Results
        uses: actions/upload-artifact@v4
        # add the line below to store screenshots only on failures
        with:
          name: code-coverage-report
          path: coverage
          if-no-files-found: warn # 'ignore' or 'error' are also available, defaults to `warn`

      # Autocommit the files to PR (if any)
      - name: Checkout PR
        if: steps.tests.outcome == 'success' && github.event_name == 'pull_request'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh pr checkout ${{ github.event.pull_request.number }}
    
      - name: Push changes
        if: steps.tests.outcome == 'success' && github.event_name == 'pull_request'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.email "208695+github-actions[bot]@users.noreply.github.com"
          git config --global user.name "GitHub Bot [bot]" 
          git add --force coverage/coverage-final.json coverage/coverage-summary.json || true
          git commit -m "chore: save coverage report" || true
          git push || true
{% endraw %}
